@model IEnumerable<SESOPtracker.Models.Entities.Equipamento>

@{
    ViewData["Title"] = "Equipamentos";
    ViewData["HeaderTitle"] = "Equipamentos";

    var statusList = ViewData["StatusList"] as IEnumerable<SelectListItem>;
    var salasList = ViewData["SalasList"] as IEnumerable<SelectListItem>;

    // var viewBy = ViewData["viewBy"] as string;

    // var equipamentosPorCategoria = ViewData["EquipamentosPorCategoria"] as List<IGrouping<string, SESOPtracker.Models.Entities.Equipamento>>;
    // var equipamentosPorSituacao = ViewData["EquipamentosPorSituacao"] as List<IGrouping<string, SESOPtracker.Models.Entities.Equipamento>>;
    // var equipamentosPorSala = ViewData["EquipamentosPorSala"] as List<IGrouping<string, SESOPtracker.Models.Entities.Equipamento>>;
    // var equipamentosPorSetor = ViewData["EquipamentosPorSetor"] as List<IGrouping<string, SESOPtracker.Models.Entities.Equipamento>>;

    // var equipamentosSimplificados = Model.Select(e => new
    // {
    //     e.patrimonio,
    //     e.nome,
    //     e.categoria,
    //     e.setor,
    //     Sala = e.Sala != null ? new { e.Sala.local } : null,
    //     Situacao = e.Situacao != null ? new { e.Situacao.descricao } : null
    // });

    var deletedEquipment = TempData["DeletedEquipment"] as bool? ?? false;
    var addedEquipment = TempData["AddEquipment"] as bool? ?? false;
}

<section>
    <main>
        <header>
            <button data-count-status="todos" class="current" data-quantity="0"> Todos </button>
            <button data-count-status="uso" data-quantity="0"> Em uso </button>
            <button data-count-status="manutenção" data-quantity="0"> Em manutenção </button>
            <button data-count-status="defeito" data-quantity="0"> Com defeito </button>
            <button data-count-status="reserva" data-quantity="0"> Reserva </button>
            <button data-count-status="substituído" data-quantity="0"> Substituído </button>

            <button data-count-status="importante" data-quantity="0"> Possui importante </button>
            <button data-count-status="patrimonio" data-quantity="0"> Sem patrimônio </button>
        </header>
        <div>
            <table class="table">
                <thead>
                    <tr>
                        <th>
                            @Html.DisplayNameFor(model => model.patrimonio)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.item)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.nome)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.subCategoria)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.categoria)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.setor)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.Sala)
                        </th>
                        <th style="display: none">
                            @Html.DisplayNameFor(model => model.Situacao)
                        </th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model) {
                        <tr 
                            onclick="location.href='@Url.Action("Details", new { id = item.patrimonio })'" 
                            data-has-important="@item.Historico.Any(h => h.importante).ToString().ToLower()"
                            style="background: @item.Situacao.ToRgb(item.Situacao.cor + "10"); border-left: 3px solid @Html.DisplayFor(modelItem => item.Situacao.cor)"
                        >
                            <td>
                                @Html.DisplayFor(modelItem => item.patrimonio)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.item)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.nome)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.subCategoria)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.categoria)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.setor)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.Sala.local)
                            </td>
                            <td style="display: none">
                                @Html.DisplayFor(modelItem => item.Situacao.descricao)
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </main>
    <aside class="filters">
        <div style="display: @(statusList == null ? "none" : "block")">
            <h4> Situações </h4>
            <p> @statusList!.Count() @(statusList!.Count() != 1 ? " disponíveis" : " disponível") </p>
            <div class="filter-items">
                @foreach (var item in statusList) {
                    <div>
                        <input type="checkbox" id="@item.Text" hidden/>
                        <label for="@item.Text"></label>
                        <span> @item.Text </span>
                    </div>
                }
            </div>
        </div>
        <div style="display: @(salasList == null ? "none" : "block")">
            <h4> Salas </h4>
            <p> @salasList!.Count() @(salasList!.Count() != 1 ? " disponíveis" : " disponível") </p>
            <div class="filter-items">
                @foreach (var item in salasList)
                {
                    <div>
                        <input type="checkbox" id="@item.Text" hidden />
                        <label for="@item.Text"></label>
                        <span> @item.Text </span>
                    </div>
                }
            </div>
        </div>
    </aside>
</section>

@* @await Html.PartialAsync("Parts/_GenerateByEquipmentList", Model)
@await Html.PartialAsync("Parts/_GenerateByKeyword", Model) *@

<div class="toast align-items-center text-bg-success border-0" role="alert" aria-live="assertive" aria-atomic="true">
    <div class="d-flex">
        <div class="toast-body">
            Equipamento deletado com sucesso!
        </div>
    </div>
</div>

<script>
    const tabButtons = document.querySelectorAll("[data-count-status]");
    const searchInput = document.querySelector(".searchbar fieldset input");
    const tableRows = document.querySelectorAll("#container section table tbody tr");

    // Adiciona evento de clique nos botões de filtro
    Array.from(tabButtons).forEach(button => {
        button.addEventListener("click", function () {
            $("[data-count-status]").removeClass("current");
            this.classList.add("current");
            const currentSearch = searchInput.value.trim().toLowerCase(); // Pega o valor atual da barra de pesquisa
            tabFilter(this.dataset.countStatus, currentSearch);
        });
    });

    // Adiciona evento de digitação na barra de pesquisa
    searchInput.addEventListener("keyup", () => {
        const currentFilter = document.querySelector("[data-count-status].current").dataset.countStatus;
        const searchQuery = searchInput.value.trim().toLowerCase();
        tabFilter(currentFilter, searchQuery);
    });

    const tableData = Array.from(tableRows).map(row => ({
        element: row,
        text: row.innerText.trim().toLowerCase(),
        situacao: row.querySelector("td:last-child").innerText.trim().toLowerCase(),
        hasImportant: row.dataset.hasImportant === "true"
    }));

    function tabFilter(status, searchQuery = "") {
        let visibleCount = 0;

        tableData.forEach(data => {
            const matchesStatus =
                status === "todos" ||
                data.situacao.includes(status) ||
                (status === "importante" && data.hasImportant) ||
                (status === "patrimonio" && data.text.includes("não consta"));
            const matchesSearch = searchQuery === "" || data.text.includes(searchQuery);

            if (matchesStatus && matchesSearch) {
                data.element.style.display = "table-row";
                visibleCount++;
            } else {
                data.element.style.display = "none";
            }
        });

        document.querySelector(`[data-count-status="${status}"]`).dataset.quantity = visibleCount;
        updateTabQuantities(searchQuery);
    }

    // Função para atualizar os atributos data-quantity de todas as abas
    function updateTabQuantities(searchQuery = "") {
        Array.from(tabButtons).forEach(button => {
            const status = button.dataset.countStatus;
            let count = 0;

            tableRows.forEach(row => {
                const situacao = row.querySelector("td:last-child").innerText.trim().toLowerCase();
                const rowText = row.innerText.trim().toLowerCase();

                const matchesStatus =
                    status === "todos" ||
                    situacao.includes(status) ||
                    (status === "importante" && row.dataset.hasImportant === "true") ||
                    (status === "patrimonio" && rowText.includes("não consta"));
                const matchesSearch = searchQuery === "" || rowText.includes(searchQuery);

                if (matchesStatus && matchesSearch) {
                    count++;
                }
            });

            button.dataset.quantity = count; // Atualiza o atributo data-quantity
        });
    }

    // Inicializa exibindo todos os equipamentos e atualizando as quantidades
    tabFilter("todos");
</script>
<script type="module">
    import { toast } from "/js/toast.js"

    document.addEventListener("DOMContentLoaded", function() {
        let hasToast = "@deletedEquipment"
        let addedEquipmentToast = "@addedEquipment"

        if (hasToast == "True") {
            toast("success", "Equipamento deletado com sucesso!")
            return;
        }

        if (addedEquipmentToast == "True") {
            toast("success", "Equipamento adicionado com sucesso!")
            return;
        }
    })
</script>