@model IEnumerable<SESOPtracker.Models.Entities.Equipamento>

@{
    ViewData["Title"] = "Equipamentos";
    ViewData["HeaderTitle"] = "Equipamentos";

    var statusList = ViewData["StatusList"] as IEnumerable<SelectListItem>;
    var salasList = ViewData["SalasList"] as IEnumerable<SelectListItem>;

    var deletedEquipment = TempData["DeletedEquipment"] as bool? ?? false;
    var addedEquipment = TempData["AddEquipment"] as bool? ?? false;
}

<section>
    <main class="loading">
        <header>
            <button data-count-status="todos" class="current" data-quantity="0"> Todos </button>

            <button data-count-status="importante" data-quantity="0"> Possui importante </button>
            <button data-count-status="patrimonio" data-quantity="0"> Sem patrimônio </button>
        </header>
        <div>
            <table class="table" id="myTable">
                <thead>
                    <tr>
                        <th>
                            @Html.DisplayNameFor(model => model.patrimonio)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.item)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.nome)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.subCategoria)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.categoria)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.setor)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.Sala)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.tag)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.Situacao)
                        </th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model) {
                        <tr 
                            onclick="location.href='@Url.Action("Details", new { id = item.patrimonio })'" 
                            data-has-important="@item.Historico.Any(h => h.importante).ToString().ToLower()"
                            style="background: @item.Situacao.ToRgb(item.Situacao.cor + "10"); border-left: 3px solid @Html.DisplayFor(modelItem => item.Situacao.cor)"
                        >
                            <td>
                                @Html.DisplayFor(modelItem => item.patrimonio)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.item)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.nome)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.subCategoria)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.categoria)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.setor)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.Sala.local)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.tag)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.Situacao.descricao)
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </main>
    <aside class="filters">
        <button class="toggle-filters">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-chevrons-left-icon lucide-chevrons-left"><path d="m11 17-5-5 5-5" /><path d="m18 17-5-5 5-5" /></svg>
        </button>
        <div>
            <h4> Relatórios </h4>
            <button class="btn-secondary" data-bs-toggle="modal" data-bs-target="#equipmentListModal">
                Por seleção
            </button>
            <button class="btn-secondary" data-bs-toggle="modal" data-bs-target="#keywordModal">
                Por palavra-chave
            </button>
        </div>
        <div class="filter-situacoes" style="display: @(statusList == null ? "none" : "block")">
            <h4> Situações </h4>
            <p> @statusList!.Count() @(statusList!.Count() != 1 ? " disponíveis" : " disponível") </p>
            <div class="filter-items">
                @foreach (var item in statusList) {
                    <div>
                        <input type="checkbox" id="@item.Text" hidden/>
                        <label for="@item.Text"></label>
                        <span> @item.Text </span>
                    </div>
                }
            </div>
        </div>
        <div class="filter-salas" style="display: @(salasList == null ? "none" : "block")">
            <h4> Salas </h4>
            <p> @salasList!.Count() @(salasList!.Count() != 1 ? " disponíveis" : " disponível") </p>
            <div class="filter-items">
                @foreach (var item in salasList)
                {
                    <div>
                        <input type="checkbox" id="@item.Text" hidden />
                        <label for="@item.Text"></label>
                        <span> @item.Text </span>
                    </div>
                }
            </div>
        </div>
    </aside>
</section>

@await Html.PartialAsync("Parts/_GenerateByEquipmentList", Model)
@await Html.PartialAsync("Parts/_GenerateByKeyword", Model)

<div class="toast align-items-center" role="alert" aria-live="assertive" aria-atomic="true">
    <div class="d-flex">
        <div class="toast-body"></div>
    </div>
</div>

<script>
    document.addEventListener("DOMContentLoaded", function() {
        $(".toggle-filters").on("click", function() {
            if ($(this).closest(".filters").hasClass("show")) {
                $(this).closest(".filters").removeClass("show")
            } else {
                $(this).closest(".filters").addClass("show")
            }
        })
    })
</script>
<script>
    $(document).ready(function () {
        const searchInput = document.querySelector(".searchbar fieldset input");
        const situationFilters = document.querySelectorAll(".filters .filter-situacoes input[type='checkbox']");
        const roomFilters = document.querySelectorAll(".filters .filter-salas input[type='checkbox']");
        const tabButtons = document.querySelectorAll("[data-count-status]");

        // Função para normalizar strings (remover acentos)
        function normalizeString(str) {
            return str.normalize("NFD").replace(/[\u0300-\u036f]/g, "").toLowerCase();
        }

        // Inicializa o DataTable
        let table = $('#myTable').DataTable({
            pageLength: 50,
            lengthChange: false,
            typeDetect: false,
            order: [[0, null]],
            columnDefs: [
                { targets: [7, 8], visible: false }
            ],
            language: {
                emptyTable: 'Nenhum equipamento cadastrado',
                zeroRecords: 'Nenhum equipamento encontrado',
                info: '_TOTAL_ _ENTRIES_',
                entries: {
                    _: 'equipamentos listados',
                    1: 'equipamento listado'
                },
                infoFiltered: ""
            },
            initComplete: () => {
                $("#myTable").closest(".loading").removeClass("loading");
            }
        });

        // Adiciona um filtro personalizado ao DataTables
        $.fn.dataTable.ext.search.push(function (settings, data, dataIndex) {
            const situacao = normalizeString(data[8]); // Coluna de Situação
            const sala = normalizeString(data[6]); // Coluna de Sala
            const textoCompleto = normalizeString(data.join(" ")); // Texto completo da linha

            // Recupera o atributo `data-has-important` da tag <tr>
            const rowNode = table.row(dataIndex).node();
            const isImportant = rowNode ? rowNode.getAttribute("data-has-important") === "true" : false;

            const selectedSituations = Array.from(situationFilters)
                .filter(filter => filter.checked)
                .map(filter => normalizeString(filter.id));

            const selectedRooms = Array.from(roomFilters)
                .filter(filter => filter.checked)
                .map(filter => normalizeString(filter.id));

            const matchesSituations = selectedSituations.length === 0 || selectedSituations.includes(situacao);
            const matchesRooms = selectedRooms.length === 0 || selectedRooms.includes(sala);

            // Verifica se a aba "Importante" ou "Patrimônio" está ativa
            const activeTab = document.querySelector("[data-count-status].current")?.dataset.countStatus || "todos";
            const matchesTab =
                activeTab === "todos" ||
                (activeTab === "importante" && isImportant) ||
                (activeTab === "patrimonio" && textoCompleto.includes("nao consta"));

            return matchesSituations && matchesRooms && matchesTab;
        });

        // Atualiza as quantidades das abas com base nos dados originais da tabela
        function updateTabQuantities() {
            const allData = table.rows().data(); // Obtém todos os dados da tabela
            let counts = {
                todos: 0,
                importante: 0,
                patrimonio: 0
            };

            // Conta os itens com base nos critérios
            allData.each(function (row, dataIndex) {
                const textoCompleto = normalizeString(row.join(" ")); // Texto completo da linha

                // Recupera o atributo `data-has-important` da tag <tr>
                const rowNode = table.row(dataIndex).node();
                const isImportant = rowNode ? rowNode.getAttribute("data-has-important") === "true" : false;

                counts.todos++;
                if (textoCompleto.includes("nao consta")) counts.patrimonio++;
                if (isImportant) counts.importante++;
            });

            // Atualiza os atributos data-quantity das abas
            tabButtons.forEach(button => {
                const status = button.dataset.countStatus;
                if (counts[status] !== undefined) {
                    button.dataset.quantity = counts[status];
                }
            });
        }

        // Aplica os filtros e redesenha a tabela
        function applyFilters() {
            table.draw(); // Redesenha a tabela com os filtros aplicados
            updateTabQuantities(); // Atualiza as quantidades das abas
        }

        // Eventos de busca e filtros
        searchInput?.addEventListener("keyup", function () {
            table.search(this.value).draw();
            applyFilters(); // Aplica os filtros após a busca
        });

        situationFilters.forEach(filter => {
            filter.addEventListener("change", applyFilters);
        });

        roomFilters.forEach(filter => {
            filter.addEventListener("change", applyFilters);
        });

        // Evento de clique nas abas
        tabButtons.forEach(button => {
            button.addEventListener("click", function () {
                tabButtons.forEach(btn => btn.classList.remove("current"));
                this.classList.add("current");
                applyFilters(); // Aplica os filtros ao clicar em uma aba
            });
        });

        // Inicializa os filtros e atualiza as quantidades
        updateTabQuantities();
        applyFilters();
    });
</script>
<script type="module">
    import { toast } from "/js/toast.js"

    document.addEventListener("DOMContentLoaded", function() {
        let hasToast = "@deletedEquipment"
        let addedEquipmentToast = "@addedEquipment"

        if (hasToast == "True") {
            toast("success", "Equipamento deletado com sucesso!")
            return;
        }

        if (addedEquipmentToast == "True") {
            toast("success", "Equipamento adicionado com sucesso!")
            return;
        }
    })
</script>